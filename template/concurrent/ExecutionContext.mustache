/*
 * Copyright 2024 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package sparx.concurrent;

import org.jetbrains.annotations.NotNull;
import sparx.concurrent.execution.*;
import sparx.util.Nothing;
import sparx.util.function.*;

///////////////////////////////////////////////
// WARNING: GENERATED CODE - DO NOT MODIFY!!
// - templating engine: {{engine}}
// - template path: {{path}}
///////////////////////////////////////////////

public interface ExecutionContext {

  int minThroughput();

  int pendingCount();

  @NotNull <P> NullaryFuture<P, Nothing> {{methodName}}(
      @NotNull Action action);

  @NotNull <P> UnaryFuture<P, Nothing> {{methodName}}(
      @NotNull Consumer<? super StreamingFuture<P>> consumer);
{{#arities}}

  @NotNull <P, {{#indexes}}P{{value}} extends P{{^last}}, {{/last}}{{/indexes}}> {{name}}Future<P, {{#indexes}}P{{value}}, {{/indexes}}Nothing> {{methodName}}(
      @NotNull {{name}}Consumer<{{#indexes}}? super StreamingFuture<P{{value}}>{{^last}}, {{/last}}{{/indexes}}> consumer);
{{/arities}}

  @NotNull <P, R> NullaryFuture<P, R> {{methodName}}(
      @NotNull Supplier<? extends Signal<R>> supplier);

  @NotNull <P, R> UnaryFuture<P, R> {{methodName}}(
      @NotNull Function<? super StreamingFuture<P>, ? extends Signal<R>> function);
{{#arities}}

  @NotNull <P, {{#indexes}}P{{value}} extends P, {{/indexes}}R> {{name}}Future<P, {{#indexes}}P{{value}}, {{/indexes}}R> {{methodName}}(
      @NotNull {{name}}Function<{{#indexes}}? super StreamingFuture<P{{value}}>, {{/indexes}}? extends Signal<R>> function);
{{/arities}}
}
