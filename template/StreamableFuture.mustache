/*
 * Copyright 2024 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package sparx.concurrent;

import org.jetbrains.annotations.NotNull;
import sparx.function.Function;

///////////////////////////////////////////////
// WARNING: GENERATED CODE - DO NOT MODIFY!! //
///////////////////////////////////////////////

public interface StreamableFuture<V, F extends SignalFuture<V>> extends SignalFuture<V> {

  @NotNull <V1, F1 extends SignalFuture<V1>> F1 {{methodName}}(
    @NotNull Function<? super F, F1> firstFunction);
{{#tuples}}

  @NotNull <{{#indexes}}V{{value}}, F{{value}} extends SignalFuture<V{{value}}>{{^last}}, {{/last}}{{#last}}> F{{value}}{{/last}}{{/indexes}} {{methodName}}(
      @NotNull final Function<? super F, F1> firstFunction,
{{#ordinals}}      @NotNull final Function<? super F{{value.prevIndex}}, F{{value.index}}> {{value.name}}Function{{^last}},{{/last}}{{#last}});{{/last}}
{{/ordinals}}{{/tuples}}

    @NotNull <V1, F1 extends SignalFuture<V1>> F1 {{methodName}}Immediately(
      @NotNull Function<? super F, F1> firstFunction);
{{#tuples}}

  @NotNull <{{#indexes}}V{{value}}, F{{value}} extends SignalFuture<V{{value}}>{{^last}}, {{/last}}{{#last}}> F{{value}}{{/last}}{{/indexes}} {{methodName}}Immediately(
      @NotNull final Function<? super F, F1> firstFunction,
{{#ordinals}}      @NotNull final Function<? super F{{value.prevIndex}}, F{{value.index}}> {{value.name}}Function{{^last}},{{/last}}{{#last}});{{/last}}
{{/ordinals}}{{/tuples}}
}
