////
// WARNING: GENERATED CODE - DO NOT MODIFY!!
////
package sparx.concurrent;

import org.jetbrains.annotations.NotNull;
import sparx.function.Function;

public interface StreamableFuture<V, F extends SignalFuture<V>> extends SignalFuture<V> {

  @NotNull <V1, F1 extends SignalFuture<V1>> F1 {{methodName}}(
    @NotNull Function<? super F, F1> firstFunction);
{{#tuples}}

  @NotNull <{{#indexes}}V{{value}}, F{{value}} extends SignalFuture<V{{value}}>{{^last}}, {{/last}}{{#last}}>{{/last}}{{/indexes}}{{#indexes}}{{#last}} F{{value}}{{/last}}{{/indexes}} {{methodName}}(
      @NotNull final Function<? super F, F1> firstFunction,
{{#ordinals}}      @NotNull final Function<? super F{{value.prevIndex}}, F{{value.index}}> {{value.name}}Function{{^last}},{{/last}}{{#last}});{{/last}}
{{/ordinals}}{{/tuples}}
}
