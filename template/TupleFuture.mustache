/*
 * Copyright 2024 Davide Maestroni
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
///////////////////////////////////////////////
// WARNING: GENERATED CODE - DO NOT MODIFY!! //
///////////////////////////////////////////////
package sparx.concurrent;

import java.util.List;
import org.jetbrains.annotations.NotNull;
import sparx.tuple.{{name}};
import sparx.util.ImmutableList;
import sparx.util.Requires;

public class {{name}}Future<V, {{#indexes}}V{{value}} extends V{{^last}}, {{/last}}{{/indexes}}> extends
    TupleStreamGroupFuture<V, {{name}}Future<V, {{#indexes}}V{{value}}{{^last}}, {{/last}}{{/indexes}}>> implements
    {{name}}<StreamingFuture<? extends V>, {{#indexes}}StreamingFuture<V{{value}}>{{^last}}, {{/last}}{{/indexes}}> {

  public static @NotNull <V, {{#indexes}}V{{value}} extends V{{^last}}, {{/last}}{{/indexes}}> {{name}}Future<V, {{#indexes}}V{{value}}{{^last}}, {{/last}}{{/indexes}}> of(
      @NotNull final StreamingFuture<V1> first,
{{#ordinals}}      @NotNull final StreamingFuture<V{{value.index}}> {{value.name}}{{^last}},{{/last}}{{#last}}) { {{/last}}
{{/ordinals}}
    return new {{name}}Future<V, {{#indexes}}V{{value}}{{^last}}, {{/last}}{{/indexes}}>(
        Requires.notNull(first, "first"),
{{#ordinals}}        Requires.notNull({{value.name}}, "{{value.name}}"){{^last}},{{/last}}{{#last}});{{/last}}
{{/ordinals}}
  }

  private final StreamingFuture<V1> first;
{{#ordinals}}  private final StreamingFuture<V{{value.index}}> {{value.name}};
{{/ordinals}}
  private final List<StreamingFuture<? extends V>> futures;

  @SuppressWarnings("unchecked")
  private {{name}}Future(
      @NotNull final StreamingFuture<V1> first,
{{#ordinals}}      @NotNull final StreamingFuture<V{{value.index}}> {{value.name}}{{^last}},{{/last}}{{#last}}) { {{/last}}
{{/ordinals}}
    this.first = first;
{{#ordinals}}    this.{{value.name}} = {{value.name}};
{{/ordinals}}
    this.futures = ImmutableList.of(first, {{#ordinals}}{{value.name}}{{^last}}, {{/last}}{{/ordinals}});
  }
{{#ordinals}}

  @Override
  public @NotNull StreamingFuture<V{{value.prevIndex}}> get{{value.prevSuffix}}() {
    return {{value.prevName}};
  }

{{#last}}  @Override
  public @NotNull StreamingFuture<V{{value.index}}> get{{value.suffix}}() {
    return {{value.name}};
  }
{{/last}}{{/ordinals}}

  @Override
  public @NotNull List<StreamingFuture<? extends V>> asList() {
    return futures;
  }

  @Override
  public @NotNull {{name}}Future<V, {{#indexes}}V{{value}}{{^last}}, {{/last}}{{/indexes}}> readOnly() {
    return this;
  }
}
