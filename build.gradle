import com.github.mustachejava.DefaultMustacheFactory
import com.github.mustachejava.util.DecoratedCollection

import java.util.stream.Collectors
import java.util.stream.Stream

buildscript {
  ext.mustacheVersion = '0.9.11'
  dependencies {
    classpath "com.github.spullara.mustache.java:compiler:$mustacheVersion"
  }
}

plugins {
  id 'java'
  id 'maven-publish'
  id 'com.github.ben-manes.versions' version '0.51.0'
}

group = 'com.github.davide-maestroni'
version = '0.0.0'

repositories {
  mavenCentral()
}

compileJava {
  options.release.set(6)
}

dependencies {
  implementation 'org.jetbrains:annotations:24.1.0'
  testImplementation platform('org.junit:junit-bom:5.10.1')
  testImplementation 'org.junit.jupiter:junit-jupiter'
}

javadoc {
  destinationDir = file("${layout.buildDirectory.get()}/docs/javadoc")
  options.memberLevel = JavadocMemberLevel.PUBLIC
}

test {
  useJUnitPlatform()
}

tasks.register('generateCode') {
  doLast {
    def engine = "Mustache ${mustacheVersion}"
    def tupleNames = [
        'Couple', 'Triple', 'Quadruple', 'Quintuple', 'Sextuple', 'Septuple', 'Octuple', 'Nonuple',
        'Decuple', 'Undecuple', 'Duodecuple', 'Tredecuple', 'Quattuordecuple', 'Quindecuple',
        'Sexdecuple', 'Septendecuple', 'Octodecuple', 'Novemdecuple', 'Viguple'
    ]
    def arityNames = [
        'Binary', 'Ternary', 'Quaternary', 'Quinary', 'Senary', 'Septenary', 'Octonary', 'Nonary',
        'Denary', 'Undenary', 'Duodenary', 'Terdenary', 'Quaterdenary', 'Quindenary', 'Sexdenary',
        'Septendenary', 'Octodenary', 'Novemdenary', 'Vigenary'
    ]
    def index = 2
    def prevName = 'first'
    def ordinalNames = [
        'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth',
        'eleventh', 'twelfth', 'thirteenth', 'fourteenth', 'fifteenth', 'sixteenth', 'seventeenth',
        'eighteenth', 'nineteenth', 'twentieth'
    ].stream().map {
      def element = [
          name      : it,
          suffix    : it.capitalize(),
          prevName  : prevName,
          prevSuffix: prevName.capitalize(),
          index     : index,
          prevIndex : index - 1
      ]
      ++index
      prevName = it
      element
    }.collect(Collectors.toList())
    def count = 1
    def tuples = tupleNames.stream().map {
      ++count
      [
          name    : it,
          count   : count,
          indexes : new DecoratedCollection<Integer>(new IntRange(1, count).stream().collect(Collectors.toList())),
          ordinals: new DecoratedCollection<Map<String, String>>(ordinalNames.subList(0, count - 1)),
          last    : count == tupleNames.size() + 1
      ]
    }.toArray()
    count = 1
    def arities = arityNames.stream().map {
      ++count
      [
          name     : it,
          count    : count,
          tupleName: tupleNames.get(count - 2),
          indexes  : new DecoratedCollection<Integer>(new IntRange(1, count).stream().collect(Collectors.toList())),
          ordinals : new DecoratedCollection<Map<String, String>>(ordinalNames.subList(0, count - 1)),
          last     : count == arityNames.size() + 1
      ]
    }.toArray()
    def factory = new DefaultMustacheFactory()
    Stream.of(arities).forEach {
      {
        def path = 'template/function/Function.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream("src/main/java/sparx/function/${it.name}Function.java"))
        def mustache = factory.compile(path)
        def scope = it.clone()
        scope['engine'] = engine
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/function/Consumer.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream("src/main/java/sparx/function/${it.name}Consumer.java"))
        def mustache = factory.compile(path)
        def scope = it.clone()
        scope['engine'] = engine
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/concurrent/ExecutionFuture.mustache'
        def scope = [
            engine : engine,
            path   : path,
            arity  : it.name,
            tuple  : tupleNames.get(it.count - 2),
            indexes: it.indexes
        ]
        def writer = new OutputStreamWriter(new FileOutputStream("src/main/java/sparx/concurrent/execution/${it.name}Future.java"))
        def mustache = factory.compile(path)
        mustache.execute(writer, scope)
        writer.close()
      }
    };
    {
      def src = [
          engine    : engine,
          methodName: 'submit',
          arities   : arities
      ];
      {
        def path = 'template/concurrent/ExecutionContext.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/concurrent/ExecutionContext.java'))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/concurrent/ExecutorContext.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream("src/main/java/sparx/concurrent/ExecutorContext.java"))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/concurrent/ExecutionScope.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream("src/main/java/sparx/concurrent/ExecutionScope.java"))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
    }
    {
      def path = 'template/logging/Log.mustache'
      def scope = [
          engine : engine,
          path   : path,
          arities: arities.take(4)
      ]
      def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/logging/Log.java'))
      def mustache = factory.compile(path)
      mustache.execute(writer, scope)
      writer.close()
    }
    {
      def src = [
          engine    : engine,
          methodName: 'then',
          tuples    : tuples
      ];
      {
        def path = 'template/concurrent/StreamableFuture.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/concurrent/StreamableFuture.java'))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/concurrent/StreamScopeFuture.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/concurrent/StreamScopeFuture.java'))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/concurrent/GeneratingFuture.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/concurrent/GeneratingFuture.java'))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/concurrent/GeneratorScopeFuture.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/concurrent/GeneratorScopeFuture.java'))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/concurrent/DecoratedFuture.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/concurrent/DecoratedFuture.java'))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/concurrent/NupleFuture.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/concurrent/tuple/NupleFuture.java'))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/util/ImmutableList.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/util/ImmutableList.java'))
        def mustache = factory.compile(path)
        def scope = src.clone()
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
    }
    {
      def path = 'template/tuple/Tuples.mustache'
      def scope = [
          engine    : engine,
          path      : path,
          methodName: 'asTuple',
          tuples    : tuples
      ]
      def writer = new OutputStreamWriter(new FileOutputStream('src/main/java/sparx/tuple/Tuples.java'))
      def mustache = factory.compile(path)
      mustache.execute(writer, scope)
      writer.close()
    }
    Stream.of(tuples).forEach {
      {
        def path = 'template/tuple/Tuple.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream("src/main/java/sparx/tuple/${it.name}.java"))
        def mustache = factory.compile(path)
        def scope = it.clone()
        scope['engine'] = engine
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/tuple/TupleClass.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream("src/main/java/sparx/tuple/${it.name}Tuple.java"))
        def mustache = factory.compile(path)
        def scope = it.clone()
        scope['engine'] = engine
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
      {
        def path = 'template/concurrent/TupleFuture.mustache'
        def writer = new OutputStreamWriter(new FileOutputStream("src/main/java/sparx/concurrent/tuple/${it.name}Future.java"))
        def mustache = factory.compile(path)
        def scope = it.clone()
        scope['engine'] = engine
        scope['path'] = path
        mustache.execute(writer, scope)
        writer.close()
      }
    }
  }
}